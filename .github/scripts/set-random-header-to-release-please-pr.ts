/**
 * This script randomly selects a header from a predefined list and applies it
 * to the pull request generated by release-please (workflows/release-please.yml).
 */

///////////////////////////////////////////////////////////////////////////////////////

/**
 * PullRequest type from the official googleapis/release-please repository.
 *
 * See: https://github.com/googleapis/release-please/blob/main/src/pull-request.ts#L15
 */
interface PullRequest {
  readonly headBranchName: string;
  readonly baseBranchName: string;
  readonly number: number;
  readonly mergeCommitOid?: string;
  readonly title: string;
  readonly body: string;
  readonly labels: string[];
  readonly files: string[];
  readonly sha?: string;
}

const HEADER_LIST = [
  "", // empty string: preserves the default header set by release-please
  "Header 2",
  "Header 3",
  "Header 4",
  "Header 5",
];

console.info("üîπ Start set-random-header-to-release-please-pr.ts");

console.info("Reading pull request JSON string from env...");
const PR_JSON_STR = Deno.env.get("PR_JSON_STR");
if (!PR_JSON_STR) {
  console.error("::error::‚ùå PR_JSON_STR environment variable is not defined.");
  Deno.exit(1);
}

console.info("Parsing pull request JSON string...");
let pullRequest: PullRequest;
try {
  pullRequest = JSON.parse(PR_JSON_STR) as PullRequest;
} catch (error) {
  console.error("::error::‚ùå Failed to parse PR_JSON_STR environment variable as JSON.\n" + error);
  Deno.exit(1);
}

console.info("Extracting pull request header...");
const firstNewlineIndex = pullRequest.body.indexOf("\n");
if (firstNewlineIndex === -1) {
  console.error("::error::‚ùå Unexpected pull request body format. No newline (\\n) found.");
  Deno.exit(1);
}
const oldPrHeader = pullRequest.body.slice(0, firstNewlineIndex);
console.info(`‚úî Original pull request header: ${oldPrHeader}`);

console.info("Selecting a random header...");
const randomIndex = Math.floor(Math.random() * HEADER_LIST.length);
const newPrHeader = HEADER_LIST[randomIndex];
console.info(`‚úî New pull request header: ${newPrHeader}`);

if (!newPrHeader) {
  console.info("üèÉ‚Äç‚ôÇÔ∏è Empty header selected. Keeping the default header set by release-please. Header replacement skipped.");
  Deno.exit(0);
}

const newPrBody = newPrHeader + pullRequest.body.slice(firstNewlineIndex);

console.info("Preparing to update PR body via GitHub REST API...");

const GITHUB_TOKEN = Deno.env.get("GITHUB_TOKEN");
if (!GITHUB_TOKEN) {
  console.error("::error::‚ùå GITHUB_TOKEN is not available. This script must be run in a GitHub Actions environment with appropriate permissions.");
  Deno.exit(1);
}
const GITHUB_REPOSITORY = Deno.env.get("GITHUB_REPOSITORY");
if (!GITHUB_REPOSITORY) {
  console.error("::error::‚ùå GITHUB_REPOSITORY is not available. Cannot determine repository owner and name.");
  Deno.exit(1);
}

const [owner, repo] = GITHUB_REPOSITORY.split("/");
const apiUrl = `https://api.github.com/repos/${owner}/${repo}/pulls/${pullRequest.number}`;
const prUrl = `https://github.com/${owner}/${repo}/pull/${pullRequest.number}`;

console.info(`Sending PATCH request to ${apiUrl}`);

try {
  const response = await fetch(apiUrl, {
    method: "PATCH",
    headers: {
      "Authorization": `Bearer ${GITHUB_TOKEN}`,
      "Accept": "application/vnd.github+json",
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ body: newPrBody }),
  });

  if (!response.ok) {
    const errorBody = await response.json();
    console.error(`::error::‚ùå Failed to update PR body. Status: ${response.status}`);
    console.log("::group::Error response:");
    console.error(JSON.stringify(errorBody, null, 2));
    console.log("::endgroup::");
    Deno.exit(1);
  }
} catch (error) {
  console.error("::error::‚ùå An unexpected error occurred during the fetch call.");
  console.error(error);
  Deno.exit(1);
}

console.info(`‚úî Successfully updated pull request: ${prUrl}`);
console.info("‚úî Script `set-random-header-to-release-please-pr.ts` finished successfully.");
Deno.exit(0);
