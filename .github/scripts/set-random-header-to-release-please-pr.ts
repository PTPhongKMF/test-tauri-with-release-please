/** set-random-header-to-release-please-pr.ts
 *
 * This script randomly selects a header from a predefined list and applies it
 * to the pull request generated by release-please (workflows/release-please.yml).
 */

///////////////////////////////////////////////////////////////////////////////////////

/**
 * "PullRequest" type from the official googleapis/release-please repository.
 *
 * See: https://github.com/googleapis/release-please/blob/main/src/pull-request.ts#L15
 */
interface PullRequest {
  readonly headBranchName: string;
  readonly baseBranchName: string;
  readonly number: number;
  readonly mergeCommitOid?: string;
  readonly title: string;
  readonly body: string;
  readonly labels: string[];
  readonly files: string[];
  readonly sha?: string;
}

interface RequiredInputs {
  token: string;
  githubRepo: string;
  prJsonStr: string;
}

const HEADER_LIST = [
  "", // empty string: preserves the default header set by release-please
  "Header 2",
  "üëí Darling, I have a new release for you",
  "Header 4",
  "Header 5",
];

function getRequiredInputs(): RequiredInputs {
  const TOKEN = Deno.env.get("TOKEN");
  if (!TOKEN) throw new Error("üîë TOKEN environment variable is not defined.");

  const GITHUB_REPOSITORY = Deno.env.get("GITHUB_REPOSITORY");
  if (!GITHUB_REPOSITORY) throw new Error("GITHUB_REPOSITORY is not available. Cannot determine repository owner and name.");

  const PR_JSON_STR = Deno.env.get("PR_JSON_STR");
  if (!PR_JSON_STR) throw new Error("PR_JSON_STR environment variable is not defined.");

  return {
    token: TOKEN,
    githubRepo: GITHUB_REPOSITORY,
    prJsonStr: PR_JSON_STR,
  };
}

async function fetchOrThrow(...args: Parameters<typeof fetch>) {
  const response = await fetch(...args);

  if (!response.ok) {
    throw new Error(
      `Request failed. Status: ${response.status}\n` +
        "::group::Error response:\n" +
        `${JSON.stringify(await response.json(), null, 2)}\n` +
        "::endgroup::",
    );
  }

  return response;
}

async function runScript() {
  const inputs = getRequiredInputs();

  console.log("Parsing pull request JSON string...");
  const pullRequest = JSON.parse(inputs.prJsonStr) as PullRequest;

  console.log("Extracting pull request header...");
  const firstNewlineIndex = pullRequest.body.indexOf("\n");
  if (firstNewlineIndex === -1) throw new Error("Unexpected pull request body format. No newline (\\n) found.");

  const oldPrHeader = pullRequest.body.slice(0, firstNewlineIndex);
  console.log(`‚úî Original pull request header: ${oldPrHeader}`);

  console.log("Selecting a random header...");
  const randomIndex = Math.floor(Math.random() * HEADER_LIST.length);
  const newPrHeader = HEADER_LIST[randomIndex];
  console.log(`‚úî New pull request header: ${newPrHeader}`);

  const newPrBody = newPrHeader + pullRequest.body.slice(firstNewlineIndex);

  const [owner, repo] = inputs.githubRepo.split("/");
  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/pulls/${pullRequest.number}`;
  const prUrl = `https://github.com/${owner}/${repo}/pull/${pullRequest.number}`;

  console.log(`Sending PATCH request (via GitHub REST API) to ${apiUrl}`);
  await fetchOrThrow(apiUrl, {
    method: "PATCH",
    headers: {
      "Authorization": `Bearer ${inputs.token}`,
      "Accept": "application/vnd.github+json",
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ body: newPrBody }),
  });

  console.log(`‚úî Successfully updated pull request: ${prUrl}`);
}

async function main() {
  console.log("üîπ Start set-random-header-to-release-please-pr.ts");

  try {
    await runScript();
  } catch (error) {
    console.log("::error::‚ùå An unexpected error occurred.\n" + error);
    Deno.exit(1);
  }

  console.log("üîπ Finished 'set-random-header-to-release-please-pr.ts' successfully.");
}

main();
