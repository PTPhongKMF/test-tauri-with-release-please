/** set-random-header-to-release-please-pr.ts
 *
 * This script randomly selects a header from a predefined list and applies it
 * to the pull request generated by release-please (workflows/release-please.yml).
 */

///////////////////////////////////////////////////////////////////////////////////////

/**
 * PullRequest type from the official googleapis/release-please repository.
 *
 * See: https://github.com/googleapis/release-please/blob/main/src/pull-request.ts#L15
 */
interface PullRequest {
    readonly headBranchName: string;
    readonly baseBranchName: string;
    readonly number: number;
    readonly mergeCommitOid?: string;
    readonly title: string;
    readonly body: string;
    readonly labels: string[];
    readonly files: string[];
    readonly sha?: string;
}

const HEADER_LIST = [
    "", // empty string: preserves the default header set by release-please
    "Header 2",
    "Header 3",
    "Header 4",
    "Header 5",
];

console.log("üîπ Start set-random-header-to-release-please-pr.ts");

try {
    const TOKEN = Deno.env.get("TOKEN");
    if (!TOKEN) throw new Error("üîë TOKEN environment variable is not defined.");

    const GITHUB_REPOSITORY = Deno.env.get("GITHUB_REPOSITORY");
    if (!GITHUB_REPOSITORY) throw new Error("GITHUB_REPOSITORY is not available. Cannot determine repository owner and name.");

    const PR_JSON_STR = Deno.env.get("PR_JSON_STR");
    if (!PR_JSON_STR) throw new Error("PR_JSON_STR environment variable is not defined.");

    console.log("Parsing pull request JSON string...");
    const pullRequest = JSON.parse(PR_JSON_STR) as PullRequest;

    console.log("Extracting pull request header...");
    const firstNewlineIndex = pullRequest.body.indexOf("\n");
    if (firstNewlineIndex === -1) throw new Error("Unexpected pull request body format. No newline (\\n) found.");

    const oldPrHeader = pullRequest.body.slice(0, firstNewlineIndex);
    console.log(`‚úî Original pull request header: ${oldPrHeader}`);

    console.log("Selecting a random header...");
    const randomIndex = Math.floor(Math.random() * HEADER_LIST.length);
    const newPrHeader = HEADER_LIST[randomIndex];
    console.log(`‚úî New pull request header: ${newPrHeader}`);

    if (!newPrHeader) {
        console.log("üèÉ‚Äç‚ôÇÔ∏è Empty header selected. Keeping the default header set by release-please. Header replacement skipped.");
    } else {
        const newPrBody = newPrHeader + pullRequest.body.slice(firstNewlineIndex);

        const [owner, repo] = GITHUB_REPOSITORY.split("/");
        const apiUrl = `https://api.github.com/repos/${owner}/${repo}/pulls/${pullRequest.number}`;
        const prUrl = `https://github.com/${owner}/${repo}/pull/${pullRequest.number}`;

        console.log(`Sending PATCH request (via GitHub REST API) to ${apiUrl}`);

        const response = await fetch(apiUrl, {
            method: "PATCH",
            headers: {
                "Authorization": `Bearer ${TOKEN}`,
                "Accept": "application/vnd.github+json",
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ body: newPrBody }),
        });

        // if (!response.ok) {
        if (true) {
            throw new Error(
                `Failed to update PR body. Status: ${response.status}\n` +
                    JSON.stringify(await response.json(), null, 2),
            );
        }

        console.log(`‚úî Successfully updated pull request: ${prUrl}`);
    }
} catch (error) {
    console.log("::error::‚ùå An unexpected error occurred.\n\n" + error);
    Deno.exit(1);
}

console.log("üîπ Script 'set-random-header-to-release-please-pr.ts' finished successfully.");
Deno.exit(0);
